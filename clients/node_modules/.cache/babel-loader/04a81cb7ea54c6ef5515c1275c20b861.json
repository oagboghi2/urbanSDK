{"ast":null,"code":"var _jsxFileName = \"/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/Pages/Dashboard/TroopDashboard.js\";\nimport React, { Component } from \"react\";\nimport Reactotron from 'reactotron-react-js';\nimport Chart from \"chart.js\";\nimport * as moment from 'moment';\nimport './tempChart.css';\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\nChart.defaults.global.legend.display = false;\n\nclass TroopDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      Reactotron.log(\"values\", this.props.chartValues);\n      const chartWidth = myChartRef.canvas.width; //---Gradient Styling---//\n\n      let gradientX = myChartRef.createLinearGradient(0, 0, chartWidth, 0);\n      gradientLine.addColorStop(0.7, \"#98b9ab\");\n      gradientLine.addColorStop(1, \"#a698b9\"); //---Gradient Styling---//\n\n      const graphHeight = myChartRef.canvas.height;\n      let gradientY = myChartRef.createLinearGradient(0, 0, 0, graphHeight);\n      gradientLine.addColorStop(0.7, \"#98b9ab\");\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          //Bring in data\n          labels: [\"Jan\", \"Feb\", \"March\"],\n          datasets: [{\n            label: \"Weather\",\n            data: this.props.chartValues,\n            fill: true,\n            borderColor: gradientLine\n          }]\n        },\n        options: {\n          //Customize chart options\n          responsive: true,\n          maintainAspectRatio: false,\n          layout: {\n            padding: {\n              top: 5,\n              left: 15,\n              right: 15,\n              bottom: 15\n            }\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                display: true\n              },\n              gridLines: {\n                display: true,\n                drawBorder: true\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                display: true\n              },\n              gridLines: {\n                display: true,\n                drawBorder: true\n              }\n            }]\n          }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.buildChart();\n  }\n\n  componentDidUpdate() {\n    this.buildChart();\n  }\n\n  render() {\n    Reactotron.log('this.props Troops.js', this.props);\n    return React.createElement(\"div\", {\n      className: \"graphContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TroopDashboard;","map":{"version":3,"sources":["/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/Pages/Dashboard/TroopDashboard.js"],"names":["React","Component","Reactotron","Chart","moment","defaults","global","defaultFontFamily","legend","display","TroopDashboard","chartRef","createRef","buildChart","myChartRef","current","getContext","log","props","chartValues","chartWidth","canvas","width","gradientX","createLinearGradient","gradientLine","addColorStop","graphHeight","height","gradientY","type","data","labels","datasets","label","fill","borderColor","options","responsive","maintainAspectRatio","layout","padding","top","left","right","bottom","scales","xAxes","ticks","gridLines","drawBorder","yAxes","componentDidMount","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Reactotron from 'reactotron-react-js';\nimport Chart from \"chart.js\";\nimport * as moment from 'moment';\nimport './tempChart.css';\n\nChart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\"\nChart.defaults.global.legend.display = false;\n\nclass TroopDashboard extends Component {\n    \n    chartRef = React.createRef();\n    \n    componentDidMount() {\n        this.buildChart()\n    }\n\n    componentDidUpdate() {\n        this.buildChart()\n    }\n\n    buildChart = () => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        Reactotron.log(\"values\", this.props.chartValues)\n        const { width: chartWidth } = myChartRef.canvas;\n\n        //---Gradient Styling---//\n        let gradientX = myChartRef\n            .createLinearGradient(0, 0, chartWidth, 0);\n        gradientLine.addColorStop(0.7, \"#98b9ab\");\n        gradientLine.addColorStop(1, \"#a698b9\");\n        \n        //---Gradient Styling---//\n        const {height: graphHeight} = myChartRef.canvas;\n\n        let gradientY = myChartRef\n            .createLinearGradient(0, 0, 0, graphHeight);\n            gradientLine.addColorStop(0.7, \"#98b9ab\");\n  \n        \n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: [\"Jan\", \"Feb\", \"March\"],\n                datasets: [\n                    {\n                        label: \"Weather\",\n                        data: this.props.chartValues,\n                        fill: true,\n                        borderColor: gradientLine\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n                responsive: true,\n                maintainAspectRatio: false,\n                layout: {\n                    padding: {\n                        top: 5,\n                        left: 15,\n                        right: 15,\n                        bottom: 15\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        ticks: { display: true },\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    }],\n                    yAxes: [{\n                        ticks: { display: true },\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    }]\n                }\n            }\n        });\n    }\n\n    \n    render() {\n\n        Reactotron.log('this.props Troops.js', this.props)\n        return (\n            <div className=\"graphContainer\">\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TroopDashboard;\n\n\n"]},"metadata":{},"sourceType":"module"}