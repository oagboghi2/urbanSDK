{"ast":null,"code":"var _jsxFileName = \"/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/Pages/Dashboard/TroopDashboard.js\";\nimport React, { Component } from \"react\";\nimport Reactotron from 'reactotron-react-js';\nimport Chart from \"chart.js\";\nimport * as moment from 'moment';\nimport './tempChart.css';\nconst graphWidth = myChartRef.canvas.width;\nlet gradientLine = ChartRef.createLinearGradient(0, 0, graphWidth * 2, 0);\ngradientLine.addColorStop(0, \"#FF006E\");\ngradientLine.addColorStop(1, \"#F46036\");\n\nclass TroopDashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      Reactotron.log(\"values\", this.props.chartValues);\n      new Chart(myChartRef, {\n        type: \"line\",\n        data: {\n          //Bring in data\n          labels: [\"Jan\", \"Feb\", \"March\"],\n          datasets: [{\n            label: \"Weather\",\n            data: this.props.chartValues,\n            fill: false\n          }]\n        },\n        options: {\n          //Customize chart options\n          responsive: true,\n          maintainAspectRatio: false,\n          layout: {\n            padding: {\n              top: 5,\n              left: 15,\n              right: 15,\n              bottom: 15\n            }\n          },\n          scales: {\n            xAxes: [{\n              ticks: {\n                display: true\n              },\n              gridLines: {\n                display: true,\n                drawBorder: true\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                display: true\n              },\n              gridLines: {\n                display: true,\n                drawBorder: true\n              }\n            }]\n          }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.buildChart();\n  }\n\n  componentDidUpdate() {\n    this.buildChart();\n  }\n\n  render() {\n    Reactotron.log('this.props Troops.js', this.props);\n    return React.createElement(\"div\", {\n      className: \"graphContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TroopDashboard;","map":{"version":3,"sources":["/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/Pages/Dashboard/TroopDashboard.js"],"names":["React","Component","Reactotron","Chart","moment","graphWidth","myChartRef","canvas","width","gradientLine","ChartRef","createLinearGradient","addColorStop","TroopDashboard","chartRef","createRef","buildChart","current","getContext","log","props","chartValues","type","data","labels","datasets","label","fill","options","responsive","maintainAspectRatio","layout","padding","top","left","right","bottom","scales","xAxes","ticks","display","gridLines","drawBorder","yAxes","componentDidMount","componentDidUpdate","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAO,iBAAP;MAEcC,U,GAAcC,UAAU,CAACC,M,CAAhCC,K;AAEP,IAAIC,YAAY,GAAGC,QAAQ,CACtBC,oBADc,CACO,CADP,EACU,CADV,EACaN,UAAU,GAAG,CAD1B,EAC6B,CAD7B,CAAnB;AAEAI,YAAY,CAACG,YAAb,CAA0B,CAA1B,EAA6B,SAA7B;AACAH,YAAY,CAACG,YAAb,CAA0B,CAA1B,EAA6B,SAA7B;;AAIA,MAAMC,cAAN,SAA6BZ,SAA7B,CAAuC;AAAA;AAAA;AAAA,SACnCa,QADmC,GACxBd,KAAK,CAACe,SAAN,EADwB;;AAAA,SAWnCC,UAXmC,GAWtB,MAAM;AACf,YAAMV,UAAU,GAAG,KAAKQ,QAAL,CAAcG,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AACAhB,MAAAA,UAAU,CAACiB,GAAX,CAAe,QAAf,EAAyB,KAAKC,KAAL,CAAWC,WAApC;AACA,UAAIlB,KAAJ,CAAUG,UAAV,EAAsB;AAClBgB,QAAAA,IAAI,EAAE,MADY;AAElBC,QAAAA,IAAI,EAAE;AACF;AACAC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAFN;AAGFC,UAAAA,QAAQ,EAAE,CACN;AACIC,YAAAA,KAAK,EAAE,SADX;AAEIH,YAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWC,WAFrB;AAGIM,YAAAA,IAAI,EAAE;AAHV,WADM;AAHR,SAFY;AAalBC,QAAAA,OAAO,EAAE;AACL;AACAC,UAAAA,UAAU,EAAE,IAFP;AAGLC,UAAAA,mBAAmB,EAAE,KAHhB;AAILC,UAAAA,MAAM,EAAE;AACJC,YAAAA,OAAO,EAAE;AACLC,cAAAA,GAAG,EAAE,CADA;AAELC,cAAAA,IAAI,EAAE,EAFD;AAGLC,cAAAA,KAAK,EAAE,EAHF;AAILC,cAAAA,MAAM,EAAE;AAJH;AADL,WAJH;AAYLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,KAAK,EAAE,CAAC;AACJC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eADH;AAEJC,cAAAA,SAAS,EAAE;AACPD,gBAAAA,OAAO,EAAE,IADF;AAEPE,gBAAAA,UAAU,EAAE;AAFL;AAFP,aAAD,CADH;AAQJC,YAAAA,KAAK,EAAE,CAAC;AACJJ,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eADH;AAEJC,cAAAA,SAAS,EAAE;AACPD,gBAAAA,OAAO,EAAE,IADF;AAEPE,gBAAAA,UAAU,EAAE;AAFL;AAFP,aAAD;AARH;AAZH;AAbS,OAAtB;AA2CH,KAzDkC;AAAA;;AAGnCE,EAAAA,iBAAiB,GAAG;AAChB,SAAK5B,UAAL;AACH;;AAED6B,EAAAA,kBAAkB,GAAG;AACjB,SAAK7B,UAAL;AACH;;AAmDD8B,EAAAA,MAAM,GAAG;AACL5C,IAAAA,UAAU,CAACiB,GAAX,CAAe,sBAAf,EAAuC,KAAKC,KAA5C;AACA,WACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKN,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AAtEkC;;AAyEvC,eAAeD,cAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Reactotron from 'reactotron-react-js';\nimport Chart from \"chart.js\";\nimport * as moment from 'moment';\nimport './tempChart.css';\n\nconst {width: graphWidth} = myChartRef.canvas;\n\nlet gradientLine = ChartRef\n    .createLinearGradient(0, 0, graphWidth * 2, 0);\ngradientLine.addColorStop(0, \"#FF006E\");\ngradientLine.addColorStop(1, \"#F46036\");\n\n\n\nclass TroopDashboard extends Component {\n    chartRef = React.createRef();\n    \n    componentDidMount() {\n        this.buildChart()\n    }\n\n    componentDidUpdate() {\n        this.buildChart()\n    }\n\n    buildChart = () => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        Reactotron.log(\"values\", this.props.chartValues)\n        new Chart(myChartRef, {\n            type: \"line\",\n            data: {\n                //Bring in data\n                labels: [\"Jan\", \"Feb\", \"March\"],\n                datasets: [\n                    {\n                        label: \"Weather\",\n                        data: this.props.chartValues,\n                        fill: false\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n                responsive: true,\n                maintainAspectRatio: false,\n                layout: {\n                    padding: {\n                        top: 5,\n                        left: 15,\n                        right: 15,\n                        bottom: 15\n                    }\n                },\n                scales: {\n                    xAxes: [{\n                        ticks: { display: true },\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    }],\n                    yAxes: [{\n                        ticks: { display: true },\n                        gridLines: {\n                            display: true,\n                            drawBorder: true\n                        }\n                    }]\n                }\n            }\n        });\n    }\n\n    \n    render() {\n        Reactotron.log('this.props Troops.js', this.props)\n        return (\n            <div className=\"graphContainer\">\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\nexport default TroopDashboard;\n"]},"metadata":{},"sourceType":"module"}