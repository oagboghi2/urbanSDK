{"ast":null,"code":"var _jsxFileName = \"/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/App.js\";\nimport React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport CardRow from './Pages/CardRow/CardRow.js';\nimport ShiftDetails from './Pages/Shift_Details/ShiftDetails.js';\nimport TroopDashboard from './Pages/Dashboard/TroopDashboard.js';\nimport * as moment from 'moment';\nimport axios from 'axios';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      forecastPeriods: [],\n      chartValues: [],\n      labelValues: [],\n      cardData: []\n    };\n\n    this.arrSum = arr => {\n      let length = arr.length;\n      let sum = arr.reduce((a, b) => a + b);\n      return sum / length;\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"component mounted\");\n    this.fetchTableData();\n  }\n\n  async fetchTableData() {\n    const response = await axios.get('https://api.weather.gov/points/30.3322,-81.6557', {\n      headers: {}\n    });\n    Reactotron.log('response', response);\n    const forecast = await axios.get(response.data.properties.forecast);\n    let cardData = response.data.properties;\n    let labelValues = forecast.data.properties.periods.map(date => date.isDaytime ? moment(date.startTime).format('DD') : null);\n    let filteredValues = labelValues.filter(item => item !== null);\n    let chartValues = forecast.data.properties.periods.map(cv => cv.temperature);\n    let avgTemperature = Math;\n    this.setState({\n      forecastPeriods: forecast.data.properties.periods,\n      chartValues,\n      filteredValues,\n      cardData\n    });\n  }\n\n  render() {\n    Reactotron.log('this.state App.js', this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(CardRow, {\n      cardData: this.state.cardData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(TroopDashboard, {\n      chartValues: this.state.chartValues,\n      filteredValues: this.state.filteredValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(ShiftDetails, {\n      weatherData: this.state.forecastPeriods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/App.js"],"names":["React","Component","Reactotron","BrowserRouter","Switch","Route","Link","CardRow","ShiftDetails","TroopDashboard","moment","axios","App","state","forecastPeriods","chartValues","labelValues","cardData","arrSum","arr","length","sum","reduce","a","b","componentDidMount","console","log","fetchTableData","response","get","headers","forecast","data","properties","periods","map","date","isDaytime","startTime","format","filteredValues","filter","item","cv","temperature","avgTemperature","Math","setState","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CardRow from './Pages/CardRow/CardRow.js';\nimport ShiftDetails from './Pages/Shift_Details/ShiftDetails.js';\nimport TroopDashboard from './Pages/Dashboard/TroopDashboard.js';\nimport * as moment from 'moment'\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component{\n  state = {\n    forecastPeriods: [], \n    chartValues : [],\n    labelValues: [],\n    cardData: []\n  };\n\n  componentDidMount(){\n    console.log(\"component mounted\");\n    this.fetchTableData();\n  }\n\n  async fetchTableData() {\n    const response = await axios.get('https://api.weather.gov/points/30.3322,-81.6557', {\n      headers: {}\n    })\n    Reactotron.log('response', response)\n    const forecast = await axios.get(response.data.properties.forecast)\n    let cardData = response.data.properties\n    let labelValues = forecast.data.properties.periods.map((date) => date.isDaytime ? moment(date.startTime).format('DD') : null);\n    let filteredValues = labelValues.filter((item) => item !== null);\n    let chartValues = forecast.data.properties.periods.map((cv) => cv.temperature);\n    let avgTemperature = Math\n    this.setState({ forecastPeriods : forecast.data.properties.periods, chartValues, filteredValues, cardData})\n  }\n\n  arrSum = (arr) => {\n    let length = arr.length\n    let sum =  arr.reduce((a,b) => a + b)\n    return sum / length;\n  }\n  \n\n  render(){\n    Reactotron.log('this.state App.js', this.state)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            {/* <div>\n              <ul>\n                <li>\n                  <Link to=\"ShiftDetails\">Shift Details</Link>\n                </li>\n                <li>\n                  <Link to=\"Dashboard\">Dashboard</Link>\n                </li>\n              </ul>\n            </div> */}\n            <hr />\n                <CardRow cardData={this.state.cardData} />\n                <TroopDashboard chartValues={this.state.chartValues} filteredValues={this.state.filteredValues}/>\n                <ShiftDetails weatherData={this.state.forecastPeriods} />\n        </header>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}