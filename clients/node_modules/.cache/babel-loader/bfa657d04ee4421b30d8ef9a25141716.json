{"ast":null,"code":"var _jsxFileName = \"/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/App.js\";\nimport React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport CardRow from './Pages/CardRow/CardRow.js';\nimport ShiftDetails from './Pages/Shift_Details/ShiftDetails.js';\nimport TroopDashboard from './Pages/Dashboard/TroopDashboard.js';\nimport * as moment from 'moment';\nimport axios from 'axios';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      week: true,\n      month: false,\n      forecastPeriods: [],\n      chartValues: [],\n      labelValues: [],\n      cardData: [],\n      location: [],\n      avgTemperature: ''\n    };\n\n    this.arrAvg = arr => {\n      let length = arr.length;\n      let sum = arr.reduce((a, b) => a + b);\n      return Math.round(sum / length);\n    };\n\n    this.clickWeekly = e => {\n      this.setState({\n        week: true,\n        month: false\n      });\n    };\n\n    this.clickMonthly = e => {\n      this.setState({\n        week: false,\n        month: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.fetchTableData();\n  }\n\n  componentDidUpdate(prevState, snapshot) {\n    Reactotron.log('State', this.state);\n    Reactotron.log('prevState', prevState); // if(prevState !== this.state){\n    //   Reactotron.log(\"no changes\")\n    // } else {\n    //   this.fetchTableData()\n    // }\n  }\n\n  async fetchTableData() {\n    const response = await axios.get('https://api.weather.gov/points/30.3322,-81.6557', {\n      headers: {}\n    });\n    Reactotron.log('response', response);\n    const forecast = await axios.get(response.data.properties.forecast);\n    Reactotron.log('forecast', forecast);\n    const forecastHourly = await axios.get(response.data.properties.forecastHourly);\n    Reactotron.log('forecastHourly', forecastHourly);\n    let cardData = response.data.properties;\n    let labelValues = forecast.data.properties.periods.map(date => date.isDaytime ? moment(date.startTime).format('DD') : null);\n    let filteredValues = labelValues.filter(item => item !== null);\n    let chartValues = forecast.data.properties.periods.map(cv => cv.temperature);\n    let location = cardData.relativeLocation.properties;\n    let avgTemperature = this.arrAvg(chartValues);\n    this.setState({\n      forecastPeriods: forecast.data.properties.periods,\n      chartValues,\n      filteredValues,\n      cardData,\n      avgTemperature,\n      location\n    });\n  }\n\n  render() {\n    Reactotron.log('this.state App.js', this.state);\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(CardRow, {\n      cardData: this.state.cardData,\n      location: this.state.location,\n      avgTemperature: this.state.avgTemperature,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(TroopDashboard, {\n      chartValues: this.state.chartValues,\n      filteredValues: this.state.filteredValues,\n      week: this.clickWeekly,\n      month: this.clickMonthly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(ShiftDetails, {\n      weatherData: this.state.forecastPeriods,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/oboagboghidi/Desktop/projects/urbansdk_test/clients/src/App.js"],"names":["React","Component","Reactotron","BrowserRouter","Switch","Route","Link","CardRow","ShiftDetails","TroopDashboard","moment","axios","App","state","week","month","forecastPeriods","chartValues","labelValues","cardData","location","avgTemperature","arrAvg","arr","length","sum","reduce","a","b","Math","round","clickWeekly","e","setState","clickMonthly","componentDidMount","fetchTableData","componentDidUpdate","prevState","snapshot","log","response","get","headers","forecast","data","properties","forecastHourly","periods","map","date","isDaytime","startTime","format","filteredValues","filter","item","cv","temperature","relativeLocation","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Reactotron from 'reactotron-react-js';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport CardRow from './Pages/CardRow/CardRow.js';\nimport ShiftDetails from './Pages/Shift_Details/ShiftDetails.js';\nimport TroopDashboard from './Pages/Dashboard/TroopDashboard.js';\nimport * as moment from 'moment'\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component{\n  state = {\n    week: true,\n    month: false,\n    forecastPeriods: [], \n    chartValues : [],\n    labelValues: [],\n    cardData: [],\n    location: [],\n    avgTemperature : ''\n  };\n\n  componentDidMount(){\n    this.fetchTableData();\n  }\n\n  componentDidUpdate(prevState, snapshot){\n    Reactotron.log('State', this.state)\n    Reactotron.log('prevState', prevState)\n    // if(prevState !== this.state){\n    //   Reactotron.log(\"no changes\")\n    // } else {\n    //   this.fetchTableData()\n    // }\n  }\n\n  async fetchTableData() {\n    const response = await axios.get('https://api.weather.gov/points/30.3322,-81.6557', {\n      headers: {}\n    })\n    Reactotron.log('response', response)\n    const forecast = await axios.get(response.data.properties.forecast)\n    Reactotron.log('forecast', forecast)\n    const forecastHourly = await axios.get(response.data.properties.forecastHourly)\n    Reactotron.log('forecastHourly', forecastHourly)\n    let cardData = response.data.properties\n    let labelValues = forecast.data.properties.periods.map((date) => date.isDaytime ? moment(date.startTime).format('DD') : null);\n    let filteredValues = labelValues.filter((item) => item !== null);\n    let chartValues = forecast.data.properties.periods.map((cv) => cv.temperature);\n    let location = cardData.relativeLocation.properties\n    let avgTemperature = this.arrAvg(chartValues);\n    this.setState({ forecastPeriods : forecast.data.properties.periods, chartValues, filteredValues, cardData, avgTemperature, location})\n  }\n\n  arrAvg = (arr) => {\n    let length = arr.length\n    let sum =  arr.reduce((a,b) => a + b)\n    return Math.round(sum / length);\n  }\n\n  clickWeekly = (e) => {\n    this.setState({ week: true, month: false})\n  }\n\n  clickMonthly = (e) => {\n    this.setState({ week: false, month: true})\n  }\n  \n\n  render(){\n    Reactotron.log('this.state App.js', this.state)\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            {/* <div>\n              <ul>\n                <li>\n                  <Link to=\"ShiftDetails\">Shift Details</Link>\n                </li>\n                <li>\n                  <Link to=\"Dashboard\">Dashboard</Link>\n                </li>\n              </ul>\n            </div> */}\n            <hr />\n              <div className=\"container\">\n                <CardRow cardData={this.state.cardData} location={this.state.location}  avgTemperature={this.state.avgTemperature} />\n                <TroopDashboard chartValues={this.state.chartValues} filteredValues={this.state.filteredValues} week={this.clickWeekly} month={this.clickMonthly} />\n                <ShiftDetails weatherData={this.state.forecastPeriods} />\n              </div>\n        </header>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}